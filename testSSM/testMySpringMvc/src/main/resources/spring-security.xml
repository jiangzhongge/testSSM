<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns="http://www.springframework.org/schema/security"
		 xmlns:b="http://www.springframework.org/schema/beans"
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://www.springframework.org/schema/beans 
		 http://www.springframework.org/schema/beans/spring-beans.xsd
		 http://www.springframework.org/schema/security
		 http://www.springframework.org/schema/security/spring-security.xsd">
						
<!--  please update your schema declarations to the 4.1 schema ↑
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
			 xmlns:beans="http://www.springframework.org/schema/beans" 
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
        http://www.springframework.org/schema/security 
        http://www.springframework.org/schema/security/spring-security-3.0.xsd"> -->
    
    <http pattern="/**/*.jpg" security="none"/>              
	<http pattern="/**/*.png" security="none"/>              
	<http pattern="/**/*.gif" security="none"/> 
	<http pattern="/**/*.ico" security="none"/>              
	<http pattern="/**/*.css" security="none"/> 
	<http pattern="/**/*.js" security="none"/>  
	<http pattern="/static/*" security="none"/>  
<!--     <http pattern="/login.jsp*" security="none"/>  -->
    
    <!-- http 放过的资源必须写在pattern="/**"上面 -->
    <http auto-config = "false">
   		 <!--<intercept-url pattern="/login.jsp*" access="IS_AUTHENTICATED_ANONYMOUSLY"/> 4.2 不支持？  -->
    	<intercept-url pattern="/" access="permitAll"/>
    	<intercept-url pattern="/login.jsp*" access="permitAll"/>
    	<intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>
    	<form-login login-page="/login.jsp"  username-parameter="userid" password-parameter="password" authentication-failure-url="/login.jsp?error=true" />
    	 <!--增加一个filter，这点与Acegi是不一样的，不能修改默认的filter了， 
    	 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
        <custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"></custom-filter>
    	<csrf disabled = "true"/>
    	<session-management>	<!-- session-management是用来防止多个用户同时登陆一个账号的 -->
    		<concurrency-control max-sessions="1" error-if-maximum-exceeded="false"/>
    	</session-management>
    </http>  
    
    <!--一个自定义的filter，必须包含
    authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
        我们的所有控制将在这三个类中实现，解释详见具体配置
 	-->
 	<b:bean id="myFilter"
		class="com.jiang.seven.security.filter.MyFilterSecurityInterceptor">
        <b:property name="authenticationManager" ref="authenticationManager"></b:property>
        <!-- authenticationManager，这个是处理验证的 -->
        <!-- 这个类不单只这个拦截器用到，还有验证拦截器AuthenticationProcessingFilter也用到 了，
        	而且实际上的登陆验证也是AuthenticationProcessingFilter拦截器调用authenticationManager来处理的，
        	我们这个拦截器只是为了拿到验证用户信息而已 
        	因为authenticationManager笔者设了断点，用户登陆后再也没调用这个类了，而且调用这个类时不是笔者自己写的那个拦截器调用的，
        	看了spring技术内幕这本书才知道是AuthenticationProcessingFilter拦截器调用的
        -->
        <b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean"></b:property>
        <!-- securityMetadataSource这个用来加载资源与权限的全部对应关系的，并提供一个通过资源获取所有权限的方法。 -->
        
        <b:property name="securityMetadataSource" ref="securityMetadataSource"></b:property>
        <!-- accessDecisionManager这个也称为授权器，通过登录用户的权限信息、资源、获取资源所需的权限来根据不同的授权策略来判断用户是否有权限访问资源。 -->
    </b:bean>
    
    <!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可-->
    <!--如果用户的密码采用加密的话<password-encoder hash="md5"/> -->
    <!-- 会被AuthenticationProcessingFilter拦截，调用AuthenticationManager的实现-->
    <!-- authenticationManager类可以有许多provider（提供者）提供用户验证信息，这里笔者自己写了一个类myUserDetailService来获取用户信息。 -->
    <b:bean id="authenticationManager" 
    	class="org.springframework.security.authentication.ProviderManager">
    </b:bean>
    
    <authentication-manager alias="authenticationManager">  <!-- 相当于AuthenticationManager 用户登陆 -->
    	<authentication-provider user-service-ref="myUserDetailService"> <!-- 相当于ProviderManager 获取用户验证信息 -->
    		<!-- <password-encoder hash="md5"></password-encoder> -->
    	</authentication-provider>
    </authentication-manager>
    
    <!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等-->
    <b:bean id="myUserDetailService"
		class="com.jiang.seven.security.service.MyUserDetailService"></b:bean>
	
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源-->
	<b:bean id="myAccessDecisionManagerBean"
		class="com.jiang.seven.security.MyAccessDecisionManager"></b:bean>
	
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource"
		class="com.jiang.seven.security.MyInvocationSecurityMetadataSource"></b:bean>
	
    <!-- 权限管理者
    <authentication-manager>
    	权限提供者 
    	<authentication-provider>
    		可提供访问的用户 
    		<user-service>
    			<user name="test" password="test" authorities="ROLE_USER , ROLE_ADMINISTRATOR"/>
    			<user name="xixi" password="xixi" authorities="ROLE_USER" /> 
    		</user-service>
    	</authentication-provider>
    </authentication-manager>
     -->
    
</b:beans>