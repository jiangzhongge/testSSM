<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- <property name="connectionProperties" value="${jdbc_driver}"></property> -->

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="1" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="20" />
		<property name="maxIdle" value="20" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 配置间隔多久进行一次检测，检测需要关闭的空闲连接单位是毫秒 -->
		<!-- <property name="timeBetweenEvictionRunsMillis" value="60000"></property> -->
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

		<!-- 配置监控统计拦截的filters -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<!-- myBatis 文件-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- 自动扫描entity目录，省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations" value="classpath:com/jiang/seven/mapping/*.xml"></property>
	</bean>
	
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.jiang.seven.dao*"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean> -->
	<!-- 定义MapperFactoryBean    
    <bean id="deptDao"   
        class="org.mybatis.spring.mapper.MapperFactoryBean">  
        <property name="mapperInterface"   
            value="org.tarena.dao.DeptMapperDao">  
        </property>  
        <property name="sqlSessionFactory"   
            ref="sqlsessionfactorybean">  
        </property>  
    </bean>  
    --> 
	<!-- 使用MapperScannerConfigurer替代MapperFactoryBean -->  
    <bean id="mapperScanner"   
        class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <!-- 指定MapperDao接口所在包 -->  
        <property name="basePackage" value="com.jiang.seven.dao*"/>  
        <!-- 指定带有@MyBatisDao标记的才当做Mapper处理 -->  
        <property name="annotationClass" value="com.jiang.seven.common.annotation.MyBatisDao" />    
        <!-- sqlSessionfactorybean默认注入了 -->  
    </bean>
	
	<!-- <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="com.cxqm.xiaoerke"/>
		<property name="typeAliasesSuperType" value="com.cxqm.xiaoerke.common.persistence.BaseEntity"/>
		<property name="mapperLocations" value="classpath*:/mappings/**/*.xml"/>
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean> -->
	
	<!-- 读写分离 -->
	<!-- <bean id="dataSource" class="com.cxqm.xiaoerke.common.dataSource.DataSource">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry value-ref="readDataSource" key="READ"></entry>
				<entry value-ref="writeDataSource" key="WRITE"></entry>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="writeDataSource"></property>
	</bean> -->
	
	<!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="append*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="repair*" propagation="REQUIRED"/>
			<tx:method name="delAndRepair*" propagation="REQUIRED"/>
			
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="load*" propagation="SUPPORTS"/>
			<tx:method name="search*" propagation="SUPPORTS"/>
			<tx:method name="datagrid*" propagation="SUPPORTS"/>
			
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut expression="execution(* com.jiang.seven.service..*Impl.*(..))" id="transactionPointCut" />
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointCut" />
	</aop:config>
	
	<!-- 配置druid监控spring jdbc 可有可无 -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.jiang.seven.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
	</aop:config>
	
	
	
</beans>
